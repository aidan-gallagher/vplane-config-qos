module vyatta-policy-filter-classification-v1 {
	namespace "urn:vyatta.com:mgmt:vyatta-policy-filter-classification:1";
	prefix policy-filter;

	import configd-v1 {
		prefix configd;
	}
	import vyatta-policy-v1 {
		prefix policy;
	}
	import vyatta-resources-v1 {
		prefix resources;
	}
	import vyatta-resources-packet-classifier-v1 {
		prefix res-gpc;
	}
	import vyatta-types-v1 {
		prefix vy-types;
	}
	import vyatta-interfaces-v1 {
		prefix if;
	}
	import vyatta-interfaces-dataplane-v1 {
		prefix interfaces-dataplane;
	}
	import vyatta-interfaces-policy-v1 {
		prefix interfaces-policy;
	}
	import vyatta-npf-v1 {
		prefix npf;
	}

	organization "AT&T Inc.";
	contact
		"AT&T
		 Postal: 208 S. Akard Street
		 Dallas, TX 75202
		 Web: www.att.com";

	description
		"Copyright (c) 2020 AT&T Intellectual Property
		 All rights reserved.

		 Redistribution and use in source and binary forms, with or without
		 modification, are permitted provided that the following conditions
		 are met:

		 1. Redistributions of source code must retain the above copyright
		    notice, this list of conditions and the following disclaimer.
		 2. Redistributions in binary form must reproduce the above
		    copyright notice, this list of conditions and the following
		    disclaimer in the documentation and/or other materials provided
		    with the distribution.
		 3. Neither the name of the copyright holder nor the names of its
		    contributors may be used to endorse or promote products derived
		    from this software without specific prior written permission.

		 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
		 FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
		 COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
		 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		 BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
		 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
		 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
		 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
		 ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
		 POSSIBILITY OF SUCH DAMAGE.

		 SPDX-License-Identifier: BSD-3-Clause

		 This module provides common groupings for Quality of Service.";

	revision 2020-12-01 {
		description "Initial revision for version 1.";
	}

	feature generic-packet-classifier {
		description "Generic packet classifier support";
	}

	grouping marking-action {
		container mark {
			description "Packet marking action";
			configd:help "Packet marking action";

			leaf designation {
				description "Designation associated with packet";
				configd:help "Designation associated with packet";
				type uint32 {
					range 0..7;
				}
			}
			leaf drop-precedence {
				description "Drop precedence associated with packet";
				configd:help "Drop precedence associated with packet";
				type enumeration {
					enum "green" {
						description "Mark packets with drop precedence green";
						configd:help "Mark packets with drop precedence green";
					}
					enum "yellow" {
						description "Mark packets with drop precedence yellow";
						configd:help "Mark packets with drop precedence yellow";
					}
					enum "red" {
						description "Mark packets with drop precedence red";
						configd:help "Mark packets with drop precedence red";
					}
				}
			}
		}
	}

	grouping filter-classification-list {
		list group {
			description "Filter classification group";
			configd:help "Filter classification group";
			key "group-name";
			min-elements 1;
			leaf group-name {
				description  "Group name";
				configd:help "Group name";
				type vy-types:alpha-numeric {
					configd:help "Group name";
				}
			}
			leaf description {
				description  "Group description";
				configd:help "Group description";
				type string;
			}
			container counters {
				description  "Configure counters";
				configd:help "Configure counters";
				presence "Group counter criteria; mandatory child nodes when configured";
				leaf sharing {
					description  "Configured counter sharing";
					configd:help "Configured counter sharing";
					mandatory true;
					type enumeration {
						enum "per-interface" {
							description  "Unique counter applied to each interface";
							configd:help "Unique counter applied to each interface";
						}
						enum "per-group" {
							description  "Shared counter applied to multiple interfaces";
							configd:help "Shared counter applied to multiple interfaces";
						}
					}
				}
				leaf type {
					description  "Configure counter type";
					configd:help "Configure counter type";
					type enumeration {
						enum auto-per-rule {
							description  "Auto per rule";
							configd:help "Auto per rule";
						}
						enum auto-per-result {
							description  "Auto per result";
							configd:help "Auto per result";
						}
					}
					default "auto-per-rule";
				}
			}
			leaf packet-classifier-group {
				description  "Generic packet classifier group name";
				configd:help "Generic packet classifier group name";
				mandatory true;
				type leafref {
					path "/resources:resources/res-gpc:packet-classifier/res-gpc:group/res-gpc:group-name";
				}
			}
			list map {
				description "Mapping of result to actions";
				configd:help "Mapping of result to actions";
				key "result";
				min-elements 1;
				leaf result {
					description  "Classifier result";
					configd:help "Classifier result";
					must "/resources:resources/res-gpc:packet-classifier/res-gpc:group/res-gpc:rule[res-gpc:result = current()]" {
						error-message "Result must be used in a classifier rule";
					}
					mandatory true;
					type leafref {
						path "/resources:resources/res-gpc:packet-classifier/res-gpc:group/res-gpc:results/res-gpc:result";
					}
				}
				container action {
					description "Actions";
					configd:help "Actions";
					presence "Actions applied to packet";
					uses marking-action;
				}
			}
		}
	}

	augment /policy:policy {
		if-feature generic-packet-classifier;
		container filter-classification {
			description "Classification filter results";
			configd:help "Classification filter results";
			presence "Map generic filter results to actions";
			uses filter-classification-list;
		}
	}

	augment /if:interfaces/interfaces-dataplane:dataplane/interfaces-policy:policy {
		if-feature generic-packet-classifier;
		leaf-list filter-classification-group {
			configd:help "QoS filter classification groups for interface, max 1 per traffic-type";
			description "QoS filter classification group for interface, max 1 per traffic type";
			type leafref {
				path "/policy:policy/filter-classification/group/group-name";
			}
			max-elements 2;
		}
	}
}
