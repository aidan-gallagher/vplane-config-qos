#!/usr/bin/env python3
"""
The Policy QoS VCI entrypoint module
"""
# Copyright (c) 2019, AT&T Intellectual Property.
# All rights reserved.
#
# SPDX-License-Identifier: LGPL-2.1-only
#

import argparse
import logging
import logging.handlers
import sys

from systemd.journal import JournalHandler

import vci

from vplaned import Controller, ControllerException

from vyatta import configd

from vyatta_policy_qos_vci.provisioner import Provisioner
from vyatta_policy_qos_vci.provisioner import get_existing_config
from vyatta_policy_qos_vci.provisioner import save_new_config
from vyatta_policy_qos_vci.qos_op_mode import convert_if_list

DSCP_GROUPS_PATH = "resources group dscp-group"

def npf_get_dscp_groups():
    """
    Called when the Policy QoS VCI process is started.  It gathers the names
    of the dscp-group currently stored in configd to establish the correct
    initial context.  This context is then updated by NPF notifications that
    are handled by npf_updates.
    """
    try:
        client = configd.Client()
    except configd.Exception as exc:
        LOG.error(f"Cannot establish client session {str(exc).strip()}")
        return []

    try:
        value = client.node_get(configd.Client.RUNNING, DSCP_GROUPS_PATH)
    except configd.Exception as exc:
        LOG.error(f"Cannot get node {DSCP_GROUPS_PATH}, {str(exc).strip()}")
        return []

    return value

#def npf_get_dscp_groups():
#    """
#    Called when the Policy QoS VCI process is started.  It gathers the names
#    of the dscp-group currently programmed in the dataplane to establish the
#    correct initial context.  This context is then updated by NPF notifications
#    that are handled by npf_updates.
#    """
#    op_mode_state = None
#    name_list = []
#    try:
#        with Controller() as ctrl:
#            for dataplane in ctrl.get_dataplanes():
#                with dataplane:
#                    op_mode_state = dataplane.json_command("npf-op dump groups")
#
#                    rule_groups_list = op_mode_state["rule_groups"]
#                    if rule_groups_list:
#                        for rule_group in rule_groups_list:
#                            if rule_group["group_class"] == "dscp-group":
#                                name_list.append(rule_group["group"])
#
#    except ControllerException:
#        LOG.error("Failed to connect with vplane-controller")
#
#    LOG.debug(f"dscp-groups: {name_list}")
#    return name_list

def issue_qos_commit():
    """
    Send a 'qos commit' to the dataplane telling it to re-evaluate any QoS
    config that uses dscp-groups.
    """
    try:
        with Controller() as ctrl:
            for dataplane in ctrl.get_dataplanes():
                with dataplane:
                    ctrl.store("qos commit", "qos commit", "ALL", "SET")

    except ControllerException:
        LOG.error("Failed to connect with vplane-controller")


def npf_update(notification):
    """
    Called when the NPF configuration has been updated.  If the QoS config
    arrived first, it will be waiting to be provisioned.
    """
#    global qos_config
#    global dscp_groups
#
#    if 'vyatta-npf-v1:dscp-groups' in notification:
#        groups = notification['vyatta-npf-v1:dscp-groups']
#        created = groups.get('created')
#        if created:
#            for group in created:
#                if group not in dscp_groups:
#                    dscp_groups.append(group)
#
#        deleted = groups.get('deleted')
#        if deleted:
#            for group in deleted:
#                if group in dscp_groups:
#                    dscp_groups.remove(group)

    if 'vyatta-npf-v1:dscp-groups' in notification:
        groups = notification['vyatta-npf-v1:dscp-groups']
        created = groups.get('created')
        modified = groups.get('modified')
        deleted = groups.get('deleted')
        LOG.debug(f"NPF update: created: {created}, modified: {modified}, deleted: {deleted}")

    if qos_config is None:
        # We must send down a qos-commit command to the dataplane to tell it
        # to re-evaluate any config that uses dscp-groups
        LOG.debug(f"NPF update: no QoS config waiting - issuing qos-commit")
        issue_qos_commit()
    else:
        LOG.debug("NPF update: QoS config waiting to be provisioned")
        send_qos_config_to_dataplane(qos_config)


#def ispresent(name, data):
#    """
#    Does the specified name appears anywhere as a key in the config JSON
#    """
#    if isinstance(data, list):
#        for item in data:
#            if isinstance(item, dict):
#                return ispresent(name, item)
#    elif isinstance(data, dict):
#        if name in data:
#            return True
#        for value in data.values():
#            result = ispresent(name, value)
#            if result is True:
#                return result
#
#    return False

def find(name, data, name_list):
    """
    Does the specified name appear anywhere as a key in the data dict,
    if so build a list of values attached to it.
    """
    if isinstance(data, list):
        for item in data:
            if isinstance(item, dict):
                find(name, item, name_list)
    elif isinstance(data, dict):
        if name in data:
            name_list.append(data[name])
            return
        for value in data.values():
            find(name, value, name_list)


def send_qos_config_to_dataplane(new_config):
    """
    We are now ready to send the QoS configuration down to the vyatta-dataplane.
    """
    global qos_config

    existing_config = get_existing_config()
    prov = Provisioner(existing_config, new_config)
    try:
        with Controller() as ctrl:
            prov.commands(ctrl)
            LOG.debug("QoS config sent to vyatta-dataplane")
            save_new_config(new_config)
            qos_config = None

    except ControllerException:
        LOG.error("Failed to connect to vplane-controller")


class Config(vci.Config):
    """
    The Configuration mode class for QoS VCI
    """
    config = {}
    def set(self, new_config):
        """
        Update the QoS config down in the dataplane from the VCI JSON
        """
        global qos_config

        LOG.debug(f"Config:set - {new_config}")
        self.config = new_config

        # Get currently configured NPF's dscp-groups
        dscp_groups = npf_get_dscp_groups()

        wait_for_npf_update = False
        dscp_group_name_list = []
        find('group-name', new_config, dscp_group_name_list)
        for dscp_group_name in dscp_group_name_list:
            if dscp_group_name not in dscp_groups:
                wait_for_npf_update = True
                LOG.debug(f"Config:set - waiting for NPF update for {dscp_group_name}")

        if wait_for_npf_update:
            # Just save the QoS config until the NPF update is received
            LOG.debug("Config:set - save QoS config until NPF update")
            qos_config = new_config
        else:
            # NPF has already been configured or there is no dependency on
            # any dscp-groups, so we can issue the QoS commands
            send_qos_config_to_dataplane(new_config)

        return

    def get(self):
        """ What do we need to put in here? """
        LOG.debug("Config:get")
        return self.config

    def check(self, _):
        """ Move the validation checks from perl to here? """
        LOG.debug("Config:check")
        return


class State(vci.State):
    """
    The Operational mode class for QoS VCI
    """
    def get(self):
        """
        Ask the vyatta-dataplane to generate the JSON for the
        current QoS state and return it
        """
        sys.stdout.flush()
        op_mode_state = None
        with Controller() as ctrl:
            for dataplane in ctrl.get_dataplanes():
                with dataplane:
                    op_mode_state = dataplane.json_command("qos optimised-show")

        yang_state = {}
        if op_mode_state is not None:
            if_list = convert_if_list("all", op_mode_state)
            if if_list:
                yang_state["if-list"] = if_list

        # We must include the namespace at the top level, and everywhere that
        # the namespace changes
        if not if_list:
            return {}

        return {'vyatta-policy-v1:policy': {'vyatta-policy-qos-v1:qos':
                                            {'state': yang_state}}}


if __name__ == "__main__":
    try:
        PARSER = argparse.ArgumentParser(description='Policy QoS VCI Service')
        PARSER.add_argument('--debug', action='store_true', help='Enabled debugging')
        ARGS = PARSER.parse_args()

        logging.root.addHandler(JournalHandler(SYSLOG_IDENTIFIER='vyatta-policy-qos-vci'))
        LOG = logging.getLogger('Policy QoS VCI')

        if ARGS.debug:
            LOG.setLevel(logging.DEBUG)
            LOG.debug("Debug enabled")

        qos_config = None

        LOG.debug("About to register with VCI")

        (vci.Component("net.vyatta.vci.policy.qos")
         .model(vci.Model("net.vyatta.vci.policy.qos.v1")
                .config(Config())
                .state(State())
               )
         .subscribe("vyatta-npf-v1", "configuration-updated", npf_update)
         .run()
         .wait())

    except:
        LOG.error(f"Unexpected error: {sys.exc_info()[0]}")
