#!/usr/bin/env python3

# Copyright (c) 2019, AT&T Intellectual Property.
# All rights reserved.
#
# SPDX-License-Identifier: LGPL-2.1-only
#

"""
Unit-tests for the qos_op_mode.py module.
"""

import json
import sys
from unittest.mock import patch
import vyatta_policy_qos_vci.qos_op_mode


def recursive_compare(data1, data2, level='root'):
    """
    Compare two multi-level dictionary/list data-structures for equality,
    printing out any differences.

    Start comparing elements at the top layer, and recurse down through
    all the dictionary and list elements until we find elements that aren't
    dictionaries or lists.
    """
    if isinstance(data1, dict) and isinstance(data2, dict):
        if data1.keys() != data2.keys():
            set1 = set(data1.keys())
            set2 = set(data2.keys())
            print('{:<20} + {} - {}'.format(level, set1-set2, set2-set1))
            sys.stdout.flush()
            common_keys = set1 & set2
        else:
            common_keys = set(data1.keys())

        for key in common_keys:
            recursive_compare(data1[key], data2[key],
                              level='{}.{}'.format(level, key))

    elif isinstance(data1, list) and isinstance(data2, list):
        if len(data1) != len(data2):
            print('{:<20} len1={}; len2={}'.format(level, len(data1),
                                                   len(data2)))
            sys.stdout.flush()

        common_len = min(len(data1), len(data2))

        for index in range(common_len):
            recursive_compare(data1[index], data2[index],
                              level='{}[{}]'.format(level, index))

    else:
        if data1 != data2:
            print('{:<20} {} != {}'.format(level, data1, data2))
            sys.stdout.flush()

    return


def test_qos_op_mode():
    """
    Unit-test this module

    The following test_data and expected_results were generated by loading
    the following configuration onto a standard Vyatta VM:

       set interfaces dataplane dp0s4 policy qos policy-2
       set interfaces dataplane dp0s5 policy qos policy-1
       set policy qos name policy-1 shaper class 1 match m1 source address 10.10.10.0/24
       set policy qos name policy-1 shaper class 1 profile profile-2
       set policy qos name policy-1 shaper default profile-1
       set policy qos name policy-1 shaper profile profile-1 bandwidth 300Mbit
       set policy qos name policy-1 shaper profile profile-2 bandwidth 200Mbit
       set policy qos name policy-2 shaper default profile-2
       set policy qos name policy-2 shaper profile profile-2 bandwidth 100Mbit
       set policy qos name policy-2 shaper traffic-class 1 queue-limit 8192
       set policy qos name policy-2 shaper traffic-class 1 random-detect filter-weight 10
       set policy qos name policy-2 shaper traffic-class 1 random-detect mark-probability 50
       set policy qos name policy-2 shaper traffic-class 1 random-detect max-threshold 8191
       set policy qos name policy-2 shaper traffic-class 1 random-detect min-threshold 4096

    then using '/opt/vyatta/bin/vplsh -lc "qos optimised-show" | json_pp' to
    generate test_data, and '/opt/vyatta/bin/qos-op-mode.pl --all | json_pp' to
    generate expected_results.
    """

    with open("./tests/qos_op_mode_config.json") as config_data:
        config = json.load(config_data)

    with open("./tests/qos_op_mode_test_data.json") as test_data:
        test_data = json.load(test_data)

    with open("./tests/qos_op_mode_expected_results.json") as results_data:
        expected_results = json.load(results_data)

    with patch('vyatta_policy_qos_vci.qos_op_mode.get_existing_config') as mock_get_existing_config:
        mock_get_existing_config.return_value = config

        yang_dict = {}
        yang_dict['if-list'] = vyatta_policy_qos_vci.qos_op_mode.convert_if_list('all', test_data)

        expected_if_list = expected_results['state']
        # recursive_compare(expected_if_list, expected_results['state'])
        assert yang_dict == expected_if_list
